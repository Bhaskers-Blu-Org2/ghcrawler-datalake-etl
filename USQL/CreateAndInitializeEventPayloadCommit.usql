// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

USE GHInsights;
REFERENCE ASSEMBLY [GHInsights.USql];
REFERENCE ASSEMBLY [Newtonsoft.Json];

@RawEventCommit =
SELECT   Urn AS EventUrn
        ,Data
        ,Urn AS EtlSourceId
        ,GHInsights.USql.Utility.GetInteger(Data, "_metadata.version") AS SchemaVersion
        ,FetchedAt
        ,ProcessedAt
        ,DeletedAt
        ,DateTime.Parse(IngestDate, null, System.Globalization.DateTimeStyles.AssumeUniversal).ToUniversalTime() AS EtlIngestDate
FROM Staging.GHCrawler.GitHubData AS e
WHERE EntityName == "PushEvent";

@EventCommitDeDupe =
SELECT   *
        ,ROW_NUMBER() OVER (PARTITION BY EventUrn ORDER BY ProcessedAt DESC) AS RowNumber
FROM @RawEventCommit;

@EventPayloadCommitExplode =
SELECT  EtlIngestDate
        ,EventUrn
        ,Int32.Parse(JsonPath.Substring(JsonPath.IndexOf("[")+1,JsonPath.IndexOf("]") -  JsonPath.IndexOf("[")-1)) AS EventPayloadCommitId
        ,JsonPath.Substring(JsonPath.IndexOf("]")+2, JsonPath.Length - 2 - JsonPath.IndexOf("]")) AS ColumnName
        ,Value AS Value
        ,SchemaVersion
        ,FetchedAt
        ,ProcessedAt
        ,DeletedAt
        ,EtlSourceId
FROM @EventCommitDeDupe AS e
CROSS APPLY EXPLODE(Data) AS d(JsonPath string, Value byte[])
WHERE JsonPath.StartsWith("payload.commits[")
AND RowNumber == 1;

@EventPayloadCommitPrePivot =
SELECT  EtlIngestDate
        ,EventUrn
        ,FetchedAt
        ,ProcessedAt
        ,DeletedAt
        ,EventPayloadCommitId
        ,MAP_AGG(ColumnName, Value) AS Data
        ,SchemaVersion
        ,EtlSourceId
FROM @EventPayloadCommitExplode AS e
GROUP BY EtlIngestDate, EventUrn, FetchedAt, ProcessedAt, DeletedAt, EventPayloadCommitId, EtlSourceId, SchemaVersion;

@EventPayloadCommit =
SELECT   EventUrn
        ,FetchedAt
        ,ProcessedAt
        ,DeletedAt
        ,EventPayloadCommitId
        ,GHInsights.USql.Utility.GetString(Data, "sha") AS EventPayloadCommitSha
        ,GHInsights.USql.Utility.GetPiiString(Data, "author.email") AS AuthorEmail
        ,GHInsights.USql.Utility.GetPiiString(Data, "author.name") AS AuthorName
        ,GHInsights.USql.Utility.GetBoolean(Data, "distinct") AS Distinct
        ,GHInsights.USql.Utility.GetUSqlString(Data, "message") AS Message
        ,SchemaVersion
        ,EtlIngestDate
        ,EtlSourceId
FROM @EventPayloadCommitPrePivot;

DROP TABLE IF EXISTS dbo.EventPayloadCommit;

CREATE TABLE dbo.EventPayloadCommit
(
    INDEX IX_EventPayloadCommit
    CLUSTERED(EventUrn)
    DISTRIBUTE
    HASH(EventUrn, EventPayloadCommitSha)
    INTO 60
)
AS
SELECT   EventUrn
        ,FetchedAt
        ,ProcessedAt
        ,DeletedAt
        ,EventPayloadCommitId
        ,EventPayloadCommitSha
        ,AuthorEmail
        ,AuthorName
        ,Distinct
        ,Message
        ,SchemaVersion
        ,EtlIngestDate
        ,EtlSourceId
FROM @EventPayloadCommit;
